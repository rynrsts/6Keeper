
Password Generator


<LinearLayout
    android:id="@+id/llPassGeneratorSpecialChar"
    android:layout_width="0dp"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toBottomOf="@+id/cbPassGeneratorSpecialChar" />


getCbPassGeneratorSpecialChar().setOnClickListener {
    val llPassGeneratorSpecialChar: LinearLayout =
            getAppCompatActivity().findViewById(R.id.llPassGeneratorSpecialChar)

    if (getCbPassGeneratorSpecialChar().isChecked) {
        createSpecialCharViews()

        llPassGeneratorSpecialChar.apply {
            addView(getLlSpecialCharacter())
        }
    } else {
        getLlSpecialCharacter().apply {
            removeAllViews()
        }
        llPassGeneratorSpecialChar.apply {
            removeAllViews()
        }
    }
}


fun createSpecialCharViews() {
    val tvSpecialCharacter = TextView(context)
    val etSpecialCharacter = EditText(context)

    tvSpecialCharacter.apply {
        layoutParams = LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT,
                ViewGroup.LayoutParams.WRAP_CONTENT
        )
        setText(R.string.pass_generator_enter_special_char)
        setTextColor(ContextCompat.getColor(context, R.color.lightBlack))
        textSize = 13F
    }

    etSpecialCharacter.apply {
        layoutParams = LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                84
        )
        background = ContextCompat.getDrawable(context, R.drawable.layout_edit_text)
        inputType = InputType.TYPE_TEXT_FLAG_MULTI_LINE
    }

    llSpecialCharacter.apply {
        layoutParams = LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.WRAP_CONTENT
        )
        background = ContextCompat.getDrawable(
                context,
                R.drawable.layout_constraint_white_quadrilateral
        )
        orientation = LinearLayout.VERTICAL
        setPadding(32, 32, 32, 32)
        addView(tvSpecialCharacter)
        addView(etSpecialCharacter)

        val topToBottom: Animation = AnimationUtils.loadAnimation(
                context,
                R.anim.anim_enter_top_to_bottom_2
        )
        startAnimation(topToBottom)
    }
}

